AXELIFE
not protected

.GOLIFE

ExprOn

.LIFE
[FF10300 000000000]->GDB1RULE

.TRIANGLE
.[4140FF4 000000000]->GDB1RULE

.MAZE SOLVE
.[AA18FF4 000000000]->GDB1RULE

.MAZE
.[FF107C0 000000000]->GDB1RULE

.CITIES
.[FF0F3C8 000000000]->GDB1RULE

.MOVE
.[FF122C8 000000000]->GDB1RULE

det(2)->&degRA
det(2)->&degRB
det(2)->&degRC
det(2)->&degRD
det(2)->&degRE
det(2)->&degRF
det(2)->&degRG
det(2)->&degRH


.the rule
{GDB1RULE}->R
.each bit of the rule
R&e0->RA:R&e1->RB
R&e2->RC:R&e3->RD
R&e4->RE:R&e5->RF
R&e6->RG:R&e7->RH


.CENTER
0->&X1T
.SUM
0->&Y1T

ClrDraw
ClrDraw&rad
NOISE()

Full
Lbl LOOP

If getKey(41)
Normal
Return
End

For(Y,16,48)
For(X,24,72)
pxl-Test(X,Y)->&X1T

0->&Y1T

.N
If RA?(pxl-Test(X,Y-1))
&Y1T++
End
.NE
If RB?(pxl-Test(X+1,Y-1))
&Y1T++
End
.E
If RC?(pxl-Test(X+1,Y))
&Y1T++
End
.SE
If RD?(pxl-Test(X+1,Y+1))
&Y1T++
End
.S
If RE?(pxl-Test(X,Y+1))
&Y1T++
End
.SW
If RF?(pxl-Test(X-1,Y+1))
&Y1T++
End
.W
If RG?(pxl-Test(X-1,Y))
&Y1T++
End
.NW
If RH?(pxl-Test(X-1,Y-1))
&Y1T++
End


READ()
If &X2T
Pxl-On(X,Y)&rad
Else
Pxl-Off(X,Y)&rad
End

End
End


RecallPic 
DispGraph
Goto LOOP


prgmAXENOISE
prgmAXELRULE